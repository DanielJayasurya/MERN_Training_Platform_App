{"version":3,"sources":["registration.js"],"names":["Registration","require","getRegistrations","req","res","find","sort","created_at","registrations","status","json","console","error","message","postRegistration","body","firstName","lastName","phoneNumber","email","qualification","gender","location","course","newRegistration","save","registration","toObject","deleteRegistration","id","params","findByIdAndDelete","deletedRegistration","updateRegistration","findByIdAndUpdate","updatedRegistration","updateRegistrationStatus","date","log","module","exports"],"mappings":"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","sourcesContent":["const Registration = require('../models/model');\r\n\r\nconst getRegistrations = async (req, res) => {\r\n  try {\r\n    const registrations = await Registration.find().sort({ created_at: -1 });\r\n    res.status(200).json(registrations);\r\n  } catch (error) {\r\n    console.error('Error fetching registrations:', error);\r\n    res.status(500).json({ message: 'Internal Server Error' });\r\n  }\r\n};\r\n\r\nconst postRegistration = async (req, res) => {\r\n  try {\r\n    const {\r\n      firstName,\r\n      lastName,\r\n      phoneNumber,\r\n      email,\r\n      qualification,\r\n      gender,\r\n      location,\r\n      course,\r\n    } = req.body;\r\n\r\n    if (!firstName || !lastName || !phoneNumber || !email || !qualification || !gender || !location || !course) {\r\n      return res.status(400).json({ message: 'All fields are required.' });\r\n    }\r\n    const newRegistration = new Registration({\r\n      firstName,\r\n      lastName,\r\n      phoneNumber,\r\n      email,\r\n      qualification,\r\n      gender,\r\n      location,\r\n      course,\r\n      status: 'pending',\r\n    });\r\n\r\n    await newRegistration.save();\r\n    res.status(201).json({\r\n      message: 'Course registration successful.',\r\n      registration: { ...newRegistration.toObject(), status: 'pending' },\r\n    });\r\n  } catch (error) {\r\n    console.error('Error registering course:', error);\r\n    res.status(500).json({ message: 'Internal Server Error' });\r\n  }\r\n};\r\n\r\nconst deleteRegistration = async (req, res) => {\r\n  const { id } = req.params;\r\n  try {\r\n    const deletedRegistration = await Registration.findByIdAndDelete(id);\r\n    if (!deletedRegistration) {\r\n      return res.status(404).json({ message: 'Registration not found.' });\r\n    }\r\n    res.status(200).json({ message: 'Registration deleted successfully.' });\r\n  } catch (error) {\r\n    console.error('Error deleting registration:', error);\r\n    res.status(500).json({ message: 'Internal Server Error' });\r\n  }\r\n};\r\n\r\n\r\nconst updateRegistration = async (req, res) => {\r\n  const { id } = req.params;\r\n  try {\r\n    const updatedRegistration = await Registration.findByIdAndUpdate(\r\n      id,\r\n      req.body,\r\n      { new: true } \r\n    );\r\n    if (!updatedRegistration) {\r\n      return res.status(404).json({ error: 'Registration not found' });\r\n    }\r\n    res.json(updatedRegistration);\r\n  } catch (error) {\r\n    console.error('Error updating registration:', error);\r\n    res.status(500).json({ error: 'Internal Server Error' });\r\n  }\r\n};\r\n\r\nconst updateRegistrationStatus = async (req, res) => {\r\n  const { id } = req.params;\r\n  const { status, date } = req.body;\r\n  try {\r\n    console.log('Received registration_id:', id);\r\n    const updatedRegistration = await Registration.findByIdAndUpdate(\r\n      id,\r\n      { status, date },\r\n      { new: true }\r\n    );\r\n    if (!updatedRegistration) {\r\n      console.error('Registration not found in the database.');\r\n      return res.status(404).json({ error: 'Registration not found' });\r\n    }\r\n    console.log('Updated registration:', updatedRegistration);\r\n    res.status(200).json(updatedRegistration);\r\n  } catch (error) {\r\n    console.error(\"Error updating registration status:\", error);\r\n    res.status(500).json({ error: \"Internal Server Error\" });\r\n  }\r\n};\r\n\r\n\r\nmodule.exports = {\r\n  getRegistrations,\r\n  postRegistration,\r\n  deleteRegistration,\r\n  updateRegistration,\r\n  updateRegistrationStatus,\r\n};"],"file":"registration.dev.js"}