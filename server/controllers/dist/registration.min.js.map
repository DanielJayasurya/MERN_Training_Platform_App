{"version":3,"sources":["registration.js"],"names":["Registration","require","getRegistrations","req","res","registrations","regeneratorRuntime","async","_context","prev","next","awrap","find","sort","created_at","sent","status","json","t0","console","error","message","stop","postRegistration","_req$body","firstName","lastName","phoneNumber","email","qualification","gender","location","course","newRegistration","_context2","abrupt","save","registration","_objectSpread","toObject","deleteRegistration","id","_context3","params","findByIdAndUpdate","updatedRegistration","updateRegistrationStatus","_req$body2","date","_context5","body","log","module","exports","updateRegistration"],"mappings":"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","file":"registration.min.js","sourcesContent":["const Registration = require('../models/model');\r\n\r\nconst getRegistrations = async (req, res) => {\r\n  try {\r\n    const registrations = await Registration.find().sort({ created_at: -1 });\r\n    res.status(200).json(registrations);\r\n  } catch (error) {\r\n    console.error('Error fetching registrations:', error);\r\n    res.status(500).json({ message: 'Internal Server Error' });\r\n  }\r\n};\r\n\r\nconst postRegistration = async (req, res) => {\r\n  try {\r\n    const {\r\n      firstName,\r\n      lastName,\r\n      phoneNumber,\r\n      email,\r\n      qualification,\r\n      gender,\r\n      location,\r\n      course,\r\n    } = req.body;\r\n\r\n    if (!firstName || !lastName || !phoneNumber || !email || !qualification || !gender || !location || !course) {\r\n      return res.status(400).json({ message: 'All fields are required.' });\r\n    }\r\n    const newRegistration = new Registration({\r\n      firstName,\r\n      lastName,\r\n      phoneNumber,\r\n      email,\r\n      qualification,\r\n      gender,\r\n      location,\r\n      course,\r\n      status: 'pending',\r\n    });\r\n\r\n    await newRegistration.save();\r\n    res.status(201).json({\r\n      message: 'Course registration successful.',\r\n      registration: { ...newRegistration.toObject(), status: 'pending' },\r\n    });\r\n  } catch (error) {\r\n    console.error('Error registering course:', error);\r\n    res.status(500).json({ message: 'Internal Server Error' });\r\n  }\r\n};\r\n\r\nconst deleteRegistration = async (req, res) => {\r\n  const { id } = req.params;\r\n  try {\r\n    const deletedRegistration = await Registration.findByIdAndDelete(id);\r\n    if (!deletedRegistration) {\r\n      return res.status(404).json({ message: 'Registration not found.' });\r\n    }\r\n    res.status(200).json({ message: 'Registration deleted successfully.' });\r\n  } catch (error) {\r\n    console.error('Error deleting registration:', error);\r\n    res.status(500).json({ message: 'Internal Server Error' });\r\n  }\r\n};\r\n\r\n\r\nconst updateRegistration = async (req, res) => {\r\n  const { id } = req.params;\r\n  try {\r\n    const updatedRegistration = await Registration.findByIdAndUpdate(\r\n      id,\r\n      req.body,\r\n      { new: true } \r\n    );\r\n    if (!updatedRegistration) {\r\n      return res.status(404).json({ error: 'Registration not found' });\r\n    }\r\n    res.json(updatedRegistration);\r\n  } catch (error) {\r\n    console.error('Error updating registration:', error);\r\n    res.status(500).json({ error: 'Internal Server Error' });\r\n  }\r\n};\r\n\r\nconst updateRegistrationStatus = async (req, res) => {\r\n  const { id } = req.params;\r\n  const { status, date } = req.body;\r\n  try {\r\n    console.log('Received registration_id:', id);\r\n    const updatedRegistration = await Registration.findByIdAndUpdate(\r\n      id,\r\n      { status, date },\r\n      { new: true }\r\n    );\r\n    if (!updatedRegistration) {\r\n      console.error('Registration not found in the database.');\r\n      return res.status(404).json({ error: 'Registration not found' });\r\n    }\r\n    console.log('Updated registration:', updatedRegistration);\r\n    res.status(200).json(updatedRegistration);\r\n  } catch (error) {\r\n    console.error(\"Error updating registration status:\", error);\r\n    res.status(500).json({ error: \"Internal Server Error\" });\r\n  }\r\n};\r\n\r\n\r\nmodule.exports = {\r\n  getRegistrations,\r\n  postRegistration,\r\n  deleteRegistration,\r\n  updateRegistration,\r\n  updateRegistrationStatus,\r\n};"]}